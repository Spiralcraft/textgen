<task:TaskRunner
  xmlns:task="class:/spiralcraft/task/"
  xmlns:example="class:/spiralcraft/data/test/example/"
  xmlns:query="class:/spiralcraft/data/query/"
  xmlns:dtask="class:/spiralcraft/data/task/"
  xmlns:dxml="class:/spiralcraft/data/xml/"
  xmlns:data="class:/spiralcraft/data/"
  xmlns:test="class:/spiralcraft/test/"
  xmlns:tg="class:/spiralcraft/textgen/"
  xmlns:jnet="class:/java/net/"
  >
  
  <service>
    <data:Space>
      <stores>
        <dxml:XmlStore>
          <name>local
          </name>
          
          <subscriber>
            <dxml:Subscriber>
              <debug>false
              </debug>
            </dxml:Subscriber>
          </subscriber>
          
          <masterURI>class:/spiralcraft/data/test/example/Snapshot.xml
          </masterURI>
          
          <masterRefreshSeconds>10
          </masterRefreshSeconds>
          
          <baseResourceURI>out/data/store/
          </baseResourceURI>
          
          <schema 
            dataURI="example:Example.schema.xml"
          />
          
          <debugLevel>INFO
          </debugLevel>
        </dxml:XmlStore>
      </stores>
    </data:Space>
  </service>
  
  <chain>
    <test:TestGroup>
      <name>spiralcraft-textgen:smoke
      </name>
      
      <throwFailure>true
      </throwFailure>
      
      <chain>
        <task:Sequence>
          <scenarios>

            <test:Assertion>
        
              <name>Inline generator
              </name>
          
              <subjectX>
                [*dtask:Fetch{[*query:Scan{[@example:Customer].type}]}].()
                .[*tg:Render
                  {templateURI
                    :=[*jnet:URI
                        {"class:/spiralcraft/textgen/test/cursorTest.tgl"
                        }
                      ]
                  }
                ]
              </subjectX>
          
              <testX>true
              </testX>
          
            </test:Assertion>
            
            <test:Assertion>
        
              <name>Skinning 1
              </name>
          
              <subjectX>
                [*tg:Render
                  {templateURI
                    :=[*jnet:URI
                        {"class:/spiralcraft/textgen/test/skin1Test.tgl"
                        }
                      ]
                  }
                ]
              </subjectX>
          
              <testX>.=="[o[i]o]"
              </testX>
          
            </test:Assertion>
            
            <test:Assertion>
        
              <name>Skinning 2- imports
              </name>
          
              <subjectX>
                [*tg:Render
                  {templateURI
                    :=[*jnet:URI
                        {"class:/spiralcraft/textgen/test/skin2Test.tgl"
                        }
                      ]
                  }
                ]
              </subjectX>
          
              <testX>.=="[o[i]o]"
              </testX>
          
            </test:Assertion>

            <test:Assertion>
        
              <name>Skinning 3- exports from define
              </name>
          
              <subjectX>
                [*tg:Render
                  {templateURI
                    :=[*jnet:URI
                        {"class:/spiralcraft/textgen/test/skin3Test.tgl"
                        }
                      ]
                  }
                ]
              </subjectX>
          
              <testX>.=="[o[[a]i[c]]o]"
              </testX>
          
            </test:Assertion>
            <test:Assertion>
        
              <name>Skinning 4- imports in include
              </name>
          
              <subjectX>
                [*tg:Render
                  {templateURI
                    :=[*jnet:URI
                        {"class:/spiralcraft/textgen/test/skin4Test.tgl"
                        }
                      ]
                  }
                ]
              </subjectX>
          
              <testX>.=="[so[o[[a]i[c]]o]so]"
              </testX>
          
            </test:Assertion>            
            <test:Assertion>
        
              <name>Skinning 5- resource based insert
              </name>
          
              <subjectX>
                [*tg:Render
                  {templateURI
                    :=[*jnet:URI
                        {"class:/spiralcraft/textgen/test/skin5Test.tgl"
                        }
                      ]
                  }
                ]
              </subjectX>
          
              <testX>.=="[so[o[[a]i[c]]o]so]"
              </testX>
          
            </test:Assertion>     
            
            <test:Assertion>
        
              <name>Skinning 6- wrapper based component
              </name>
          
              <subjectX>
                [*tg:Render
                  {templateURI
                    :=[*jnet:URI
                        {"class:/spiralcraft/textgen/test/skin6Test.tgl"
                        }
                      ]
                  }
                ]
              </subjectX>
          
              <testX>.=="[so[o[[a]i[c]]o]so]"
              </testX>
          
            </test:Assertion>    
            
            <test:Assertion>
        
              <name>Skinning 7- wrapper based component with context
              </name>
          
              <subjectX>
                [*tg:Render
                  {templateURI
                    :=[*jnet:URI
                        {"class:/spiralcraft/textgen/test/skin7Test.tgl"
                        }
                      ]
                  }
                ]
              </subjectX>
          
              <testX>.=="[o[i[outer]i]o]"
              </testX>
          
            </test:Assertion>  
                               
            <test:Assertion>
        
              <name>Encapsulation 1
              </name>
          
              <subjectX>
                [*dtask:Fetch{[*query:Scan{[@example:Customer].type}]}].()
                .[*tg:Render
                  {templateURI
                    :=[*jnet:URI
                        {"class:/spiralcraft/textgen/test/encap1.tgl"
                        }
                      ]
                  }
                ]
              </subjectX>
          
              <testX>true
              </testX>
          
            </test:Assertion>        

            <test:Assertion>
              <name>Constants 1
              </name>
          
              <subjectX>
                [*tg:Render 
                  {templateURI
                    :=[*jnet:URI
                        {"class:/spiralcraft/textgen/test/const1.tgl"
                        }
                      ]
                  }
                ]
              </subjectX>
          
              <testX>true
              </testX>
          
            </test:Assertion>        

            <test:Assertion>
              <name>Constants 2
              </name>
          
              <subjectX>
                [*tg:Render 
                  {templateURI
                    :=[*jnet:URI
                        {"class:/spiralcraft/textgen/test/const2.tgl"
                        }
                      ]
                  }
                ]
              </subjectX>
          
              <testX>true
              </testX>
          
            </test:Assertion>        

            <test:Assertion>
              <name>Render Wrap 
              </name>
          
              <subjectX>
                [*tg:Render 
                  {templateURI
                    :=[*jnet:URI
                        {"class:/spiralcraft/textgen/test/renderWrap.tgl"
                        }
                      ]
                  ,stateful:=true
                  }
                ]
              </subjectX>
          
              <testX>true
              </testX>
          
            </test:Assertion>        
          </scenarios>
        </task:Sequence>
      
      </chain>
    </test:TestGroup>
  </chain>
    
</task:TaskRunner>